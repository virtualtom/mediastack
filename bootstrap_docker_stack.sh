#!/bin/bash

# === Configuration ===
REPO_URL="git@github.com:virtualtom/mediastack.git"
REPO_NAME="mediastack"
TARGET_DIR="/opt/docker"
DOCKER_USER="dockeruser"
DOCKER_GROUP="docker"
ENV_FILE=".env"

# === Ensure running as root ===
if [ "$EUID" -ne 0 ]; then
  echo "❌ Please run this script with sudo or as root."
  exit 1
fi

# === Get UID/GID for dockeruser ===
DOCKER_UID=$(id -u "$DOCKER_USER")
DOCKER_GID=$(id -g "$DOCKER_USER")

# === Install Docker if not present ===
if ! command -v docker &> /dev/null; then
    echo "📦 Docker not found. Installing Docker..."
    apt-get update
    apt-get install -y ca-certificates curl gnupg lsb-release
    mkdir -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt-get update
    apt-get install -y docker-ce docker-ce-cli containerd.io
    echo "✅ Docker installed successfully."
else
    echo "✅ Docker already installed."
fi

# === Install Docker Compose if not present ===
if ! command -v docker-compose &> /dev/null && ! command -v docker compose &> /dev/null; then
    echo "📦 Docker Compose not found. Installing Docker Compose..."
    COMPOSE_VERSION="1.29.2"
    curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
    echo "✅ Docker Compose installed successfully."
else
    echo "✅ Docker Compose already installed."
fi

# === Clone or update the repository ===
echo "📁 Ensuring $TARGET_DIR exists..."
mkdir -p "$TARGET_DIR"
chown "$DOCKER_USER:$DOCKER_GROUP" "$TARGET_DIR"
cd "$TARGET_DIR"

if [ -d "$REPO_NAME/.git" ]; then
    echo "🔄 Repo already exists. Pulling latest changes..."
    cd "$REPO_NAME"
    sudo -u "$DOCKER_USER" git pull origin main
else
    echo "⬇️ Cloning repo into $TARGET_DIR/$REPO_NAME..."
    sudo -u "$DOCKER_USER" git clone "$REPO_URL"
    cd "$REPO_NAME"
fi

# === Set ownership again after pull/clone ===
echo "🔐 Fixing ownership of repo files..."
chown -R "$DOCKER_USER:$DOCKER_GROUP" .

# === Run directory setup script ===
if [ -f "arrstack/setup_docker_dirs.sh" ]; then
    echo "🛠 Running setup_docker_dirs.sh..."
    bash arrstack/setup_docker_dirs.sh
else
    echo "⚠️ setup_docker_dirs.sh not found."
fi

# === Write .env files per docker-compose directory ===
echo "📄 Generating .env files with UID and GID..."
for d in $(find . -name docker-compose.yml -exec dirname {} \;); do
  echo "🔧 Creating .env in $d"
  cat > "$d/.env" <<EOF
# Generated by bootstrap_docker_stack.sh

PUID=$DOCKER_UID
PGID=$DOCKER_GID
TZ=America/New_York
EOF
  chown "$DOCKER_USER:$DOCKER_GROUP" "$d/.env"
done

echo "✅ Bootstrap complete!"
echo "📁 Repo path: $TARGET_DIR/$REPO_NAME"
echo "👤 PUID: $DOCKER_UID, PGID: $DOCKER_GID"
